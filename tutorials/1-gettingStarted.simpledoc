Key
    "a first Macaulay2 session"
Headline
    Basic Introduction to Macaulay2
Description
    Code
        SUBSECTION "Basic usage"
    Text
        First, let's restart Macaulay2 so that we are starting fresh.
    Example
        restart
    Text
        Your first input prompt will be \({\tt i1\colon}\).  In response to the prompt,
        either press the "2+2" button below, or
        type \({\tt 2+2}\), and press return.  The expression you entered will be
        evaluated - no punctuation is required at the end of the line.
    Example
        2+2
    Text
        The answer is displayed to the right of the output label \({\tt o1 = }\).
    Text
        Here is some arithmetic with fractions.
    Example
        3/5 + 7/11
    Text
        Notice the additional line of output labeled with \({\tt o2\colon }\).
        Output lines labeled with colons provide information about the type of
        output.  In this case, the symbol \({\tt QQ}\) is our notation for
        the class of all rational numbers, and indicates that the answer on
        the previous line is a rational number.
    Text
        Multiplication is indicated with an asterisk.
    Example
        1*2*3*4
    Text
        Powers are obtained with \({\tt \hat{}}\).
    Example
        2^200
    Text
        Factorials are obtained with \({\tt!}\).
    Example
        40!
    Text
        Some output is longer than the window.  Scroll horizontally to see
        the rest of the output.
    Example
        100!
    Text
        Multiple expressions may be separated by semicolons.
    Example
        1;2;3*4
    Text
        A semicolon at the end of the line suppresses the printing of the value.
    Example
        4*5;
    Text
        The output from the previous line can be obtained with \({\tt oo}\)  even if
        a semicolon prevented it from being printed.
    Example
        oo
    Text
        Lines before that can be obtained with \({\tt ooo}\) and \({\tt oooo}\).
        Alternatively, the symbol labeling an output line
        can be used to retrieve the value, as in the following example.
    Example
        o5 + 1
    Text
        To enter a string, use quotation marks.
    Example
        "hi there"
    Text
        A value can be assigned to a variable with \({\tt "="}\).
    Example
        s = "hi there"
    Text
        Strings may be concatenated horizontally with \({\tt "|"}\).
    Example
        s | " - " | s
    Text
        or vertically with \({\tt "||"}\).
    Example
        s || " - " || s
    Code
        SUBSECTION "Lists and functions"
    Text
        A list of expressions can be formed with braces.
    Example
        L = {1, 2, s}
    Text
        All indexing in Macaulay2 is 0-based.  Indexing is done
        using underscores.
    Example
        L_0
        L_1
    Text
        Lists behave like vectors.
    Example
        10*{1,2,3} + {1,1,1}
    Text
        A function can be created with the arrow operator, "->".
    Example
        f = i -> i^3
    Text
        To evaluate a function, place its argument to the right of the function.
    Example
        f 5
    Text
        Functions of more than one variable take a parenthesized sequence of arguments.
    Example
        g = (x,y) -> x * y
        g(6,9)
    Text
        The function "apply" can be used to apply a function to each element of a list.
    Example
        apply({1,2,3,4}, i -> i^2)
        apply({1,2,3,4}, f)
    Text
        The operator \({\tt ".."}\) may be used to generate sequences of consecutive numbers.
    Example
        apply(1 .. 4, f)
    Text
        If the first argument to \({\tt apply}\) is an integer \({\tt n}\), then it stands for the list \(\{0, 1, ..., n-1\}\).
    Example
        apply(5, f)
    Text
        The syntax for a \({\tt for}\) loop is the following.
    Example
        for i from 1 to 5 do print(i, i^3)
    Code
        SUBSECTION "Rings, matrices, and ideals"
    Text
        Most computations with polynomials take place in rings that may be specified in usual mathematical notation.
    Example
        R = ZZ/5[x,y,z];
    Text
        \({\tt ZZ}\) represents the ring of integers.
        The symbols \({\tt ZZ/5}\)
        represent the quotient ring \(\ZZ/5\ZZ\), and then \({\tt ZZ/5[x,y,z]}\)
        represents the ring of polynomials in the variables x,y, and z with coefficients
        in the ring \(\ZZ/5\ZZ\).
    Example
        (x+y)^5
    Text
        Rings and certain other types of things acquire the name of the global variable they are assigned to.
    Example
        R
    Text
        To see the original description of a ring, use "describe".
    Example
        describe R
    Text
        A free module can be created as follows.
    Example
        F = R^3
    Text
        The i-th basis element of \({\tt F}\) can be obtained by indexing with underscore.
        In this example, the valid values for \(i\) are 0, 1, and 2.
    Example
        F_1
    Text
        Using a list of indices instead will produce the homomorphism
        corresponding to the basis vectors indicated.
    Example
        F_{1,2}
    Text
        Repetitions are allowed.
    Example
        F_{2,1,1}
    Text
        We can create a homomorphism between free modules with "matrix"
        by providing the list of rows of the matrix, each of which is in turn
        a list of ring elements.
    Example
        f = matrix {{x,y,z}}
    Text
        Use "image" to get the image of f.
    Example
        image f
    Text
        We may use "ideal" to produce the corresponding ideal.
    Example
        ideal (x,y,z)
    Text
        We may use "kernel" to compute the kernel of \(f\).
    Example
        kernel f
    Text
        The answer comes out as a module that is expressed as the image of
        a homomorphism whose matrix is displayed.  Integers inside braces to
        the left of the matrix give the degrees of the basis elements of the
        target of the matrix; they are omitted if the degrees are all zero.
        In case the matrix itself is desired, it can be obtained
        with "generators", as follows.
    Example
        generators oo
    Text
        We may use "poincare" to compute the Poincare polynomial (the numerator of
        the Hilbert function).
    Example
        poincare kernel f
    Text
        We may use "rank" to compute the rank.
    Example
        rank kernel f
    Text
        A presentation for the kernel can be obtained with "presentation".
    Example
        presentation kernel f
    Text
        We can produce the cokernel with "cokernel"; no computation is performed.
    Example
        cokernel f
    Text
        The direct sum is formed with "++".
    Example
        N = kernel f ++ cokernel f
    Text
        The answer is expressed in terms of the "subquotient" function, which
        produces subquotient modules.  Each subquotient module is accompanied
        by its matrix of generators and its matrix of relations.  These matrices
        can be recovered with "generators" and "relations".
    Example
        generators N
        relations N
    Text
        The function "prune" can be used to convert a subquotient
           module to a quotient module.
    Example
        prune N
    Text
        We can use "resolution" to compute a projective resolution of the
           cokernel of \(f\).
    Example
        C = resolution cokernel f
    Text
        To see the differentials we examine \({\tt C.dd}\).
    Example
        C.dd
    Text
        We can verify that \(C\) is a complex by squaring the differential map.
    Example
        C.dd^2 == 0
    Text
        We can use "betti" to see the degrees of the components of \(C\).
    Example
        betti C
    Text
        Let's try a harder example.  We can use "vars" to create a sequence
           of variables.
    Example
        R = ZZ/101[a .. r];
    Text
        We use "genericMatrix" to make a 3 by 6 generic matrix whose
         entries are drawn from the variables of the ring \(R\).
    Example
        g = genericMatrix(R,a,3,6)
    Text
        Then we construct its cokernel with "cokernel".
    Example
        M = cokernel g
    Text
        We may use "resolution" to produce a projective resolution of it, and
        "time", to report the time required.
    Example
        time C = resolution M
    Text
        As before, we may examine the degrees of its components, or display it.
    Example
        betti C
    Text
        We can make a polynomial ring with 18 "IndexedVariable"s.
    Example
        S = ZZ/101[t_1 .. t_9, u_1 .. u_9];
    Text
        We can use "genericMatrix" to pack the variables into
           3-by-3 matrices.
    Example
        m = genericMatrix(S, t_1, 3, 3)
        n = genericMatrix(S, u_1, 3, 3)
    Text
        We may look at the matrix product.
    Example
        m*n
    Text
        Let's produce the equations generated by the equations that assert
           that m and n commute with each other.
    Example
        j = ideal(m*n - n*m)
    Text
        Let's compute a Groebner basis for the image of \(j\) with "groebnerBasis".
    Example
        gbj = groebnerBasis j;
    Text
        The semicolon prevents the matrix of generators from appearing on the
        screen, but the class of the matrix appears -- we see that there are 26
        generators.
    Text
        We can use "betti" to see the degrees involved in the Groebner basis.
    Example
        betti gbj
    Text
        Macaulay2 has many more mathematical functions, and many user defined packages.
        Try out other tutorials to see some possibilities, or peruse the documentation
        at
    Example
        viewHelp "Macaulay2Doc"
